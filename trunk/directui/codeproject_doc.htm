
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html>
<head>
<title>Article Source</title>
<link rel="stylesheet" type="text/css" href="http://s.codeproject.com/App_Themes/Std/CSS/CodeProject.css?dt=2.5.120426.2" />
<base href="http://www.codeproject.com/KB/library/" />
</head>
<body>
<!--
HTML for article "DirectUI" by Xiang Zhai
URL: http://www.codeproject.com/KB/library/372559.aspx
Copyright 2012 by Xiang Zhai
All formatting, additions and alterations Copyright Â© CodeProject, 1999-2012
-->



<p><b>Please choose 'View Source' in your browser to view the HTML, or File | Save to save this 
file to your hard drive for editing.</b></p>

<hr class="Divider subdue" />
<div>




<!-- Start Article -->
<span id="ArticleContent">

<ul class="download">
<li><a href="372559/bin-debug-20120425.zip">Download bin-debug-20120425.zip</a>&nbsp;</li>
<li><a href="http://xsandbox.googlecode.com/svn/trunk/directui/">DirectUI Souce Code Version Control</a>&nbsp;</li>
</ul>
<h2>Introduction</h2>
<p>Recently I chatted with my university classmate, he asked me choosing which library to develop GUI, I said using MFC for VC++, WinForm for C#, and Gtk for Linux. Then he passionatly introduced DirectUI to me, a windowless presentation manager using XML to describe GUI, skinning with bmp/jpg/png, animating based on DirectX. Actrualy it is smiliar with Linux GUI toolchain <a href="http://glade.gnome.org">Glade</a> (based on XML), <a href="http://www.cairographics.org">Cairo</a> (2D graphic library), OpenGL (3D graphic library) and <a href="http://www.gtk.org">Gtk</a>.&nbsp;</p>
<h2>Background</h2>
<p>DirectUI is a C++ user interface library created by Microsoft to be a WPF like API for native applications. <strong>It is not released to the public</strong> but is being used widely throughout Microsoft products including Windows, Microsoft Office, and Windows Live Messenger.&nbsp;</p>
<p>So I google with DirectUI keyword, it often shown the commercial products, but I really want to find out some open source libraries. Fortunatly it is on the <a href="http://www.viksoe.dk/code/windowless1.htm">Bjarke Viksoe personal website</a> and the <a href="http://code.google.com/p/duilib">extended version</a>&nbsp;maintained by DuiLib group.</p>
<p>I checked out the <a href="http://duilib.googlecode.com/svn">extended version source code</a>, it added alpha rendering support and some other cool features, but it removed 3D animation based on DirectX. So I simply <a href="http://code.google.com/p/xsandbox/source/detail?r=14">added 3D animation</a> based on DirectX developed by Bjarke Viksoe to the extended version.</p><p>DirectUI controls` architecture generated by doxygen for the extended version shown as below:&nbsp;</p><p><img width="472" height="1902" src="372559/CControlUI.png" />&nbsp;&nbsp;</p>
<h2>Using the code</h2>
<p>Because there is&nbsp;<code>#include &lt;d3d9.h&gt;</code> in <em>DirectUICore/Internal.h</em>, it need to download <a href="http://www.microsoft.com/download/en/details.aspx?id=6812">DirectX SDK</a>.</p>
<p><strong>Set DirectX SDK include and library path, f</strong><strong>or example, in VS 2005`s Tool -&gt; Option... -&gt; Project and solution -&gt; VC++ directory.</strong></p>
<p>In the DirectUI source code there is <a href="http://xsandbox.googlecode.com/svn/trunk/directui/HelloWorld">HelloWorld</a> test case to play with DirectUI.</p>
<img width="175" height="175" src="372559/HelloWorld1a.png" />
<ul>
<li>Create Win32 console application;</li>
<li>Choose category as Window application;</li>
<li>Set Link -&gt; Output file: ..\bin\Debug\HelloWorld.exe</li>
</ul>

<pre lang="C++">// WinMain is the main entry point
int APIENTRY WinMain(HINSTANCE hInstance, HINSTANCE /*hPrevInstance*/, LPSTR /*lpCmdLine*/, int nCmdShow)
{
    // CPaintManagerUI is the Windowless presentation manager
    CPaintManagerUI::SetInstance(hInstance);
    CPaintManagerUI::SetResourcePath(CPaintManagerUI::GetInstancePath());

    HRESULT Hr = ::CoInitialize(NULL);
    if (FAILED(Hr)) return 0;
    // CFrameWindowWnd is the major class object to show a dialog window
    CFrameWindowWnd* pFrame = new CFrameWindowWnd();
    if (NULL == pFrame) return 0;
    pFrame-&gt;Create(NULL, _T(&quot;HelloWorld&quot;), UI_WNDSTYLE_FRAME, WS_EX_WINDOWEDGE);
    pFrame-&gt;CenterWindow();
    pFrame-&gt;ShowWindow(true);
    CPaintManagerUI::MessageLoop();

    ::CoUninitialize();
    return 0;
}</pre>

<p><code>WM_CREATE</code> in the HandleMessage use <em>res/hello.xml</em> (<strong>it need to copy the files and directories under res/ directory to compiler folder such as bin/Debug</strong>) to describe GUI. In the <a href="http://xsandbox.googlecode.com/svn/trunk/directui/res/hello.xml">hello.xml</a>, set window min and normal size, defined the button with normal, hot and pushed images then notify the click event.</p>
<img width="175" height="175" src="372559/HelloWorld2a.png" /><div><p>XXXWindowWnd architecture generated by doxygen shown as below:</p><p><img width="738" height="80" src="372559/CWindowWnd.png" /><br />
</p><pre>class CFrameWindowWnd : public CWindowWnd, public INotifyUI
{
public:
    CFrameWindowWnd() { };
    LPCTSTR GetWindowClassName() const { return _T(&quot;UIMainFrame&quot;); };
    UINT GetClassStyle() const { return UI_CLASSSTYLE_FRAME | CS_DBLCLKS; };
    void OnFinalMessage(HWND /*hWnd*/) { delete this; };

    void Notify(TNotifyUI&amp; msg)
    {
	if (msg.sType == _T(&quot;click&quot;)) 
        {
            // When clicked the HelloWorld button, it shown a message box
            if (msg.pSender-&gt;GetName() == _T(&quot;hellobtn&quot;)) 
	    {
	        ::MessageBox(NULL, _T(&quot;HelloWorld&quot;), _T(&quot;HelloWorld&quot;), MB_OK);
            }
        }
    }

    LRESULT HandleMessage(UINT uMsg, WPARAM wParam, LPARAM lParam)
    {
        if (uMsg == WM_CREATE) 
	{
            m_pm.Init(m_hWnd);
            CDialogBuilder builder;
            CControlUI* pRoot = builder.Create(_T(&quot;hello.xml&quot;), (UINT)0, NULL, &amp;m_pm);
            ASSERT(pRoot &amp;&amp; &quot;Failed to parse XML&quot;);
            m_pm.AttachDialog(pRoot);
            m_pm.AddNotifier(this);
            return 0;
        }
        else if (uMsg == WM_DESTROY) 
	{
            ::PostQuitMessage(0L);
        }
        else if (uMsg == WM_ERASEBKGND) 
	{
            return 1;
        }
        LRESULT lRes = 0;
        if (m_pm.MessageHandler(uMsg, wParam, lParam, lRes)) return lRes;
        return CWindowWnd::HandleMessage(uMsg, wParam, lParam);
    }

public:
    CPaintManagerUI m_pm;
};
</pre>

<p><a href="http://xsandbox.googlecode.com/svn/trunk/directui/TestApp1">TestApp1</a> is a simple test case more complex than Hello World stuff.&nbsp;</p><p><img width="397" height="321" src="372559/TestApp1.png" />&nbsp;</p>

<ul>
<li><code>WM_CREATE</code> in the HandleMessage use <em>res/test1.xml</em> (<strong>it need to copy the files and directories under res/ directory to compiler folder such as bin/Debug</strong>) to describe GUI;</li>
<li><code>Windowinit</code> in the Notify call <code>OnPrepare</code> to add <strong>Delegate</strong> routine for some slider controls, CDelegateBase architecture shown as below:&nbsp;&nbsp;<img width="410" height="80" src="372559/CDelegateBase.png" /></li>
<li><code>AddAnimJob</code> in the <code>OnPrepare</code> adding 3D animation based on DirectX cool effect;</li>
<li><code>changeskinbtn</code> is able to change the skin runtime;&nbsp;</li>
</ul>
<pre lang="C++">class CFrameWindowWnd : public CWindowWnd, public INotifyUI
{
public:
    CFrameWindowWnd() { };
    LPCTSTR GetWindowClassName() const { return _T(&quot;UIMainFrame&quot;); };
    UINT GetClassStyle() const { return UI_CLASSSTYLE_FRAME | CS_DBLCLKS; };
    void OnFinalMessage(HWND /*hWnd*/) { delete this; };

    void Init() { }

    bool OnHChanged(void* param) 
    {
        TNotifyUI* pMsg = (TNotifyUI*)param;
        if (pMsg-&gt;sType == _T(&quot;valuechanged&quot;)) 
	{
            short H, S, L;
            CPaintManagerUI::GetHSL(&amp;H, &amp;S, &amp;L);
            CPaintManagerUI::SetHSL(true, (static_cast&lt;CSliderUI*&gt;(pMsg-&gt;pSender))-&gt;GetValue(), S, L);
        }
        return true;
    }

    bool OnSChanged(void* param) 
    {
        TNotifyUI* pMsg = (TNotifyUI*)param;
        if (pMsg-&gt;sType == _T(&quot;valuechanged&quot;)) 
	{
            short H, S, L;
            CPaintManagerUI::GetHSL(&amp;H, &amp;S, &amp;L);
            CPaintManagerUI::SetHSL(true, H, (static_cast&lt;CSliderUI*&gt;(pMsg-&gt;pSender))-&gt;GetValue(), L);
        }
        return true;
    }

    bool OnLChanged(void* param) 
    {
        TNotifyUI* pMsg = (TNotifyUI*)param;
        if (pMsg-&gt;sType == _T(&quot;valuechanged&quot;)) 
	{
            short H, S, L;
            CPaintManagerUI::GetHSL(&amp;H, &amp;S, &amp;L);
            CPaintManagerUI::SetHSL(true, H, S, (static_cast&lt;CSliderUI*&gt;(pMsg-&gt;pSender))-&gt;GetValue());
        }
        return true;
    }

    bool OnAlphaChanged(void* param) 
    {
        TNotifyUI* pMsg = (TNotifyUI*)param;
        if (pMsg-&gt;sType == _T(&quot;valuechanged&quot;)) 
	{
            m_pm.SetTransparent((static_cast&lt;CSliderUI*&gt;(pMsg-&gt;pSender))-&gt;GetValue());
        }
        return true;
    }

    void OnPrepare() 
    {
        CSliderUI* pSilder = static_cast&lt;CSliderUI*&gt;(m_pm.FindControl(_T(&quot;alpha_controlor&quot;)));
        if (pSilder) pSilder-&gt;OnNotify += MakeDelegate(this, &amp;CFrameWindowWnd::OnAlphaChanged);
        
	pSilder = static_cast&lt;CSliderUI*&gt;(m_pm.FindControl(_T(&quot;h_controlor&quot;)));
        if (pSilder) pSilder-&gt;OnNotify += MakeDelegate(this, &amp;CFrameWindowWnd::OnHChanged);
        
	pSilder = static_cast&lt;CSliderUI*&gt;(m_pm.FindControl(_T(&quot;s_controlor&quot;)));
        if (pSilder) pSilder-&gt;OnNotify += MakeDelegate(this, &amp;CFrameWindowWnd::OnSChanged);
        
	pSilder = static_cast&lt;CSliderUI*&gt;(m_pm.FindControl(_T(&quot;l_controlor&quot;)));
        if (pSilder) pSilder-&gt;OnNotify += MakeDelegate(this, &amp;CFrameWindowWnd::OnLChanged);

	COLORREF clrBack = RGB(0, 0, 0);
	RECT rcCtrl = m_pm.FindControl(_T(&quot;changeskinbtn&quot;))-&gt;GetPos();
	m_pm.AddAnimJob(CAnimJobUI(UIANIMTYPE_FLAT, 0, 350, clrBack, clrBack, CRect(rcCtrl.left, rcCtrl.top, rcCtrl.left + 50, rcCtrl.top + 50), 40, 0, 4, 255, 0.3f));
    }

    void Notify(TNotifyUI&amp; msg)
    {
	if (msg.sType == _T(&quot;windowinit&quot;)) 
	{
	    OnPrepare();
	}
        else if (msg.sType == _T(&quot;click&quot;)) 
	{
            if (msg.pSender-&gt;GetName() == _T(&quot;insertimagebtn&quot;)) 
	    {
                CRichEditUI* pRich = static_cast&lt;CRichEditUI*&gt;(m_pm.FindControl(_T(&quot;testrichedit&quot;)));
                if (pRich) 
		{
                    pRich-&gt;RemoveAll();
                }
            }
            else if (msg.pSender-&gt;GetName() == _T(&quot;changeskinbtn&quot;)) 
	    {
                if (CPaintManagerUI::GetResourcePath() == CPaintManagerUI::GetInstancePath())
                    CPaintManagerUI::SetResourcePath(CPaintManagerUI::GetInstancePath() + _T(&quot;skin\\FlashRes&quot;));
                else
                    CPaintManagerUI::SetResourcePath(CPaintManagerUI::GetInstancePath());
                CPaintManagerUI::ReloadSkin();
            }
        }
    }

    LRESULT HandleMessage(UINT uMsg, WPARAM wParam, LPARAM lParam)
    {
        if (uMsg == WM_CREATE) 
	{
            m_pm.Init(m_hWnd);
            CDialogBuilder builder;
            CControlUI* pRoot = builder.Create(_T(&quot;test1.xml&quot;), (UINT)0, NULL, &amp;m_pm);
            ASSERT(pRoot &amp;&amp; &quot;Failed to parse XML&quot;);
            m_pm.AttachDialog(pRoot);
            m_pm.AddNotifier(this);
            Init();
            return 0;
        }
        else if (uMsg == WM_DESTROY) 
	{
            ::PostQuitMessage(0L);
        }
        else if (uMsg == WM_ERASEBKGND) 
	{
            return 1;
        }
        LRESULT lRes = 0;
        if (m_pm.MessageHandler(uMsg, wParam, lParam, lRes)) return lRes;
        return CWindowWnd::HandleMessage(uMsg, wParam, lParam);
    }

public:
    CPaintManagerUI m_pm;
};&nbsp;</pre>
<h2>Points of Interest</h2>
<p>DirectUI developed by Bjarke Viksoe is an outstanding open source project, so it is comfortable to read the source code and learn a lot :)&nbsp;&nbsp;</p>
<h2>History</h2>
<ul><li>2012-04-24: Added 3D animation based on DirectX developed by Bjarke Viksoe to the extended version.</li></ul>
</div>



</span>
<!-- End Article -->




</div> 
</body>
</html>
